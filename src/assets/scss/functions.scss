@use "sass:math";
@use "sass:meta";
@use "sass:string";

@function rem($px) {
  @return math.div($px, 100) * 1rem;
}

// 把css上下文中的class名字筛选出来 (.block__element +,) => block__element +
@function --selector-to-string($selector) {
  $selector: meta.inspect($selector);

  @if string.index($selector, "(.") and string.index($selector, ",)") { // 是否是css上下文，还是其他普通字符串
    $begin: string.index($selector, ".");
    $end: string.index($selector, ",");
    $selector: string.slice($selector, $begin + 1, $end - 1);
  }

  @return $selector;
}

// 返回class名字是否存在指定的子字符串
@function contains-modifier($selector,$strings:"@@") {
  $selector: --selector-to-string($selector);

  @each $subString in $strings {
    @if string.index($selector, $subString) {
      @return true;
    }
  }

  @return false;
}

// 截取$block名字
@function get-block-selector($selector,$strings) {
  $selector: --selector-to-string($selector);

  @each $subString in $strings {
    $index: string.index($selector, $subString);

    @if $index {
      $selector: string.slice($selector, 1, $index - 1);
    }
  }

  @return $selector;
}

// 截取$element名字
@function get-element-selector($selector,$strings) {
  $clone: $selector;
  $selector: --selector-to-string($selector);
  $index: string.index($selector, " ");

  @if $index {
    $selector: string.slice($selector, $index + 1);
    $index: string.index($selector, ".");

    @if $index {
      @return get-block-selector(string.slice($selector, $index + 1), $strings);
    }
  }

  @return get-block-selector($clone, $strings);
}
